(() => {
  // src/js/utils/index.js
  var $ = document.querySelector.bind(document);
  var $$ = document.querySelectorAll.bind(document);
  function formatPrice(value) {
    const { format } = new Intl.NumberFormat("en-US", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    return `$${format(value / 100)}`;
  }

  // src/js/product.js
  var form = $('form[action="/cart/add"]');
  var variantSelector = form.querySelector('select[name="id"]');
  var addToCartBtn = form.querySelector(".add-to-cart-btn");
  var soldOutBtn = form.querySelector(".sold-out-btn");
  var errMsg = form.querySelector(".error-msg");
  var variantOptions = Array.from(form.querySelectorAll(".variant-selector")).map((item) => item.dataset.optionName);
  form.addEventListener("change", updateProductForm);
  function updateProductForm() {
    let formData = new FormData(form);
    variantOptions.forEach((option) => {
      let optionPreview = form.querySelector(`[data-option-preview="${option}"]`);
      optionPreview && (optionPreview.innerHTML = formData.get(option));
    });
    let selectedValues = variantOptions.map((option) => formData.get(option)).join` / `;
    let newlySelectedVariant = Array.from(variantSelector.options).find((option) => option.text.includes(selectedValues));
    if (!!newlySelectedVariant) {
      addToCartBtn.removeAttribute("disabled");
      errMsg.setAttribute("hidden", true);
      variantSelector.value = newlySelectedVariant.value;
      let { selectedPrice, selectedCompareAtPrice, selectedAvailable } = newlySelectedVariant.dataset;
      form.querySelector("[data-price]").innerHTML = formatPrice(selectedPrice);
      if (form.querySelector("[data-compare-at-price]")) {
        form.querySelector("[data-compare-at-price]").innerHTML = formatPrice(selectedCompareAtPrice);
      }
      if (selectedAvailable === "true") {
        addToCartBtn.removeAttribute("hidden");
        soldOutBtn.setAttribute("hidden", true);
      } else {
        addToCartBtn.setAttribute("hidden", true);
        soldOutBtn.removeAttribute("hidden");
      }
      let urlParams = new URLSearchParams(window.location.search);
      urlParams.set("variant", newlySelectedVariant.value);
      window.history.replaceState({}, "", `?${urlParams.toString()}`);
    } else {
      addToCartBtn.setAttribute("disabled", true);
      errMsg.removeAttribute("hidden");
      errMsg.innerHTML = "This configuration does not exist";
    }
  }
  updateProductForm();
  var handleIntersection = (entries, observer2) => {
    if (!entries[0].isIntersecting)
      return;
    observer2.unobserve(productRecommendationsSection);
    fetch(productRecommendationsSection.dataset.url).then((response) => response.text()).then((text) => {
      const html = document.createElement("div");
      html.innerHTML = text;
      const recommendations = html.querySelector(".product-recommendations");
      if (recommendations && recommendations.innerHTML.trim().length) {
        productRecommendationsSection.innerHTML = recommendations.innerHTML;
      }
    }).catch(console.error);
  };
  var productRecommendationsSection = $(".product-recommendations");
  var observer = new IntersectionObserver(handleIntersection, { rootMargin: "0px 0px 200px 0px" });
  observer.observe(productRecommendationsSection);
  var productTabs = $$('input[name="pdp-tabs"]');
  var tabItems = $$(".pdp-tab-item");
  function updateSelectedTab() {
    tabItems?.forEach((item) => {
      item.classList.remove("is-active");
    });
    const selectedTab = $('input[name="pdp-tabs"]:checked');
    $(`.pdp-tab-item[for="${selectedTab?.id}"]`)?.classList.add("is-active");
  }
  updateSelectedTab();
  productTabs?.forEach((tab) => {
    tab.addEventListener("change", updateSelectedTab);
  });
  tabItems?.forEach((item) => {
    if (item.innerText.includes("Dimensions")) {
      let linkToSizes = $(".link-to-sizes");
      linkToSizes?.removeAttribute("hidden");
      linkToSizes?.addEventListener("click", () => {
        $('.pdp-tab-item[for="pdp-tab-2"]')?.click();
      });
    }
  });
})();
